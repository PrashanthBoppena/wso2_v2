<?xml version="1.0" encoding="UTF-8"?>
<api context="/uol" name="customerRead_TMF" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST GET" url-mapping="/customer-read">
        <inSequence>
            <sequence key="gov:custom/sequences/DynamicPropertySetterSequence_Script.xml"/>
            <property expression="json-eval($)" name="API_Request" scope="default" type="STRING"/>
            <property expression="get-property('query.param.fields')" name="fields" scope="default" type="STRING"/>
            <payloadFactory media-type="json">
                <format>{&#xd;
    "queryName": "TMF_test_read_services",&#xd;
    "parameters": {&#xd;
   		"customer_id": "518531",&#xd;
        "csId":"518531",&#xd;
		"sub_api_id": "read_customer"&#xd;
    }&#xd;
}</format>
                <args/>
            </payloadFactory>
            <propertyGroup description="BSCS Properties">
                <property expression="get-property('file','apiRegistryConfigs')" name="apiregistryConfigPath" scope="default" type="STRING"/>
                <property expression="json-eval($)" name="dynamicQueryMediatorRequestPayload" scope="default" type="STRING"/>
            </propertyGroup>
            <class description="Dynamic Query" name="com.knot.uol.mediators.DynamicXMLQueryMediator"/>
            <!--        <log level="custom">
                <property expression="$ctx:dynamicQueryMediatorResponsePayload" name="dynamicQueryMediatorResponsePayload"/>
            </log> -->
            <log level="custom">
                <property expression="$ctx:dynamicQueryMediatorResponsePayload" name="$ctx:dynamicQueryMediatorResponsePayload"/>
            </log>
            <payloadFactory description="buildPayload" media-type="json">
                <format>$1</format>
                <args>
                    <arg evaluator="json" expression="$ctx:dynamicQueryMediatorResponsePayload.response"/>
                </args>
            </payloadFactory>
            <log description="log the Enableflag Count" level="custom">
                <property expression="get-property('query.param.fields')" name="get-property('query.param.fields')"/>
            </log>
            <script language="js"><![CDATA[var fields = mc.getProperty('fields');
if (fields !== null && fields.trim() !== "" && fields.length() !== 0.0) {
    var fieldsArray = fields.split(',');
	var log = mc.getServiceLog();
	log.info(fields.length());
    var payload = mc.getPayloadJSON();
	
    var filteredPayload = [];

    // Iterate through each item in the payload array
    payload.forEach(function(item) {
		//log.info(item.hasOwnProperty('process_name'));  working
		//log.info(item['process_name']);				  working
        // Iterate through each field specified in fieldsArray
        fieldsArray.forEach(function(field) {
            // Check if the current item has the specified field
			//log.info(typeof item['process_name']);	
			
			//log.info(field.equals(item['process_name']));	
            if (item.hasOwnProperty('tmf_params') && field.equals(item['tmf_params'])) {
                // Add the item to the filteredPayload
				//log.info(item.hasOwnProperty('process_name') && field.equals(item['process_name']));
                filteredPayload.push(item);
            }
        });
    });

    mc.setPayloadJSON(filteredPayload);
}]]></script>
            <property expression="json-eval($.length())" name="dynamicMediationItrCount" scope="default" type="STRING"/>
            <log description="log the Enableflag Count" level="custom">
                <property expression="get-property('dynamicMediationItrCount')" name="dynamicMediationItrCount"/>
            </log>
            <iterate expression="//jsonElement" id="dynamicMediationItrAgg1" sequential="true">
                <target>
                    <sequence>
                        <sequence key="gov:custom/sequences/DynamicPropertySetterSequence_Script.xml"/>
                        <switch source="$ctx:system_name">
                            <case regex="UOL"/>
                            <case regex="EB">
                                <sequence key="gov:custom/sequences/childIdGeneratingSeq.xml"/>
                                <sequence key="gov:custom/sequences/EB_SOAP_Call_Seq.xml"/>
                                <!--<log level="custom">
                                    <property expression="json-eval($)" name="eb response data==>"/>
                                </log>-->
                            </case>
                            <case regex="QUERY"/>
                            <case regex="NMS"/>
                            <default/>
                        </switch>
                    </sequence>
                </target>
            </iterate>
            <aggregate id="dynamicMediationItrAgg1">
                <completeCondition>
                    <messageCount max="-1" min="-1"/>
                </completeCondition>
                <onComplete aggregateElementType="root" expression="json-eval($)">
                    <script language="js"><![CDATA[var log = mc.getServiceLog();
var jsonArray = mc.getPayloadJSON();

var newObj ={};
jsonArray.forEach(function(element) {
var currentKey = Object.keys(element)[0];
newObj[currentKey] = element[currentKey];

});
mc.setPayloadJSON(newObj);]]></script>
                    <log level="custom">
                        <property expression="json-eval($)" name="AggRes===>"/>
                    </log>
                    <datamapper config="gov:datamapper/TMF_ReadCust_DataMapperConfig.dmc" inputSchema="gov:datamapper/TMF_ReadCust_DataMapperConfig_inputSchema.json" inputType="JSON" outputSchema="gov:datamapper/TMF_ReadCust_DataMapperConfig_outputSchema.json" outputType="JSON" xsltStyleSheet="gov:datamapper/TMF_ReadCust_DataMapperConfig_xsltStyleSheet.xml"/>
                    <respond/>
                </onComplete>
            </aggregate>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
</api>
